<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Zunik Blog</title>
    <link>https://zunik.me/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>춤추는 개발자 주닉의 블로그입니다.</description>
    <pubDate>Wed, 19 Aug 2020 17:02:19 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>진화론에서 배운 삶</title>
      <link>https://zunik.me/2020/08/20/life-learned-from-evolution/</link>
      <guid>https://zunik.me/2020/08/20/life-learned-from-evolution/</guid>
      <pubDate>Wed, 19 Aug 2020 15:53:14 GMT</pubDate>
      <description>
      
        진화론에서 배운 성장 방법
      
      </description>
      
      
      <content:encoded><![CDATA[<p>&nbsp; 진화론이란 1859년 찰스 다윈이 ‘종의 기원’이란 책을 통해 체계화한 이론이며, 그 이후 많은 연구가 진행되어 지금은 과학적 사실로 받아들여지고 있다. 진화의 메커니즘이 밝혀진 이래로 생물학뿐만 아닌 천문학, 심리학 등의 많은 분야에 영향을 주고 있다.</p><a id="more"></a><p>&nbsp; 진화의 메커니즘은 간단하다. 무작위적으로 돌연변이가 일어나고 자연이 선택한다. 생식세포(정자, 난자)에 특정 확률로 돌연변이가 발생하고, 반대 성별의 생식 세포에 담긴 유전자와 섞인다. 그 결과, 태어난 자식들은 조금씩 다른 특질을 갖게 된다. 생물은 자연이 수용할 수 없을 정도로 많은 자식을 낳으며, 생존하기 더 좋은 특질을 가진 개체만 살아남고 아닌 개체는 죽거나 짝짓기 경쟁에서 밀려 다음 세대로 유전자를 전달하지 못한다. “자연아 네가 뭘 좋아할지 몰라 다양하게 준비했어!”라는 일종의 전략이다. 그렇게 적절한 개체수는 유지되며, 자연에 더 적합한 유전자가 다음 세대로 계속 전달된다. 이것이 ‘자연 선택’이며 진화다.</p><p>&nbsp; 여기서 중요한 것은 무작위로 발생하는 돌연변이다. 기린의 목을 예로 들어보자. 낮은 위치에서는 다양한 초식 동물과 먹이 경쟁을 해야 했기 때문에 배부르게 먹기 어려웠을 것이다. 이때 기린은 높은 곳의 식물을 먹기 위해 애를 쓰다 보니 목이 길게 발달한 것이 아니다. 목이 조금 길게 태어난 돌연변이가 있었고, 그 개체는 생존에 유리했기에 선택되었을 것이다. 그런 형질이 수천 세대, 수만 세대가 선택되다 보니 지금처럼 긴 목을 가지게 된 것이다. 진화에는 선견지명이 없다. 그냥 무심히 그때그때 유리한 특징을 누적시켜 나가는 것뿐이다.</p><p>&nbsp; ‘돌연변이’로 시도하고 ‘자연’에 의해 다듬어진다. 이 단순한 메커니즘을 통해 단세포 생물이 수억 년의 시간을 거쳐 다양한 생물로 분기했으며, ‘눈’과 ‘뇌’와 같은 복잡한 기관들이 만들어졌다.  35억 년 동안 검증된 이 메커니즘에서 우리가 배울 것은 아주 많다. </p><blockquote><p>자연 선택에 의한 진화라는 다윈의 이론은, 내가 느끼기에는, 모든 과학 이론들 중에서 가장 아름답다. 그것은 너무나 단순하면서도 그 결과가 너무나 복잡하다는 점에서 참 아름답다. 직관에 반하는 내용이기 때문에 쉽게 파악되지 않지만, 일단 그것을 이해하고 나면 눈앞의 세계가 전혀 다르게 보인다. 생명계의 복잡성을 설명하기 위해서 굳이 위대한 설계자를 끌어들일 필요가 없다. 그저 명징하고도 무심한 하나의 과정이 있을 뿐이고, 우리 모두는 그 과정을 통해서 생겨났다. </p><p>- 밈, 수전 블랙모어 저, 김영남 역, 바다출판사 249p</p></blockquote><br /><h1 id="시도하고-피드백-받아라"><a href="#시도하고-피드백-받아라" class="headerlink" title="시도하고 피드백 받아라"></a>시도하고 피드백 받아라</h1><p>&nbsp; 우리의 삶에 이 메커니즘을 녹여내면 ‘돌연변이’는 ‘시도’가 되고 ‘자연 선택’은 ‘피드백’이 된다. 생명체가 많은 자손을 낳아서 유전자 전달 확률을 높이는 것처럼 우리도 많은 시도를 해야 한다. 시도하면 우리를 둘러싼 환경에서 항상 피드백이 온다. ‘조언’, ‘질책’, ‘칭찬’, ‘표정’, ‘연봉’, ‘무반응’ 등 우리를 둘러싼 모든 상호작용이 피드백이다. 시도하지 않으면 새로운 피드백을 받을 수 없다. 시도하고 피드백을 통해 다듬는다. 우리는 이런 식으로 성장한다. </p><p>&nbsp; “이렇게 한다고 우리 100세 인생이 크게 바뀌겠어? 진화는 그런 반복이 적어도 몇십만 년이 이루어져야 큰 결실을 발하는데 말이야!”라고 의문이 들 수 있겠다. 그런데 생각해보면 인간은 이미 생물학적 진화로도 시간의 제약을 깨왔다. 그것은 바로 ‘육종’이다. 인간은 늑대로부터 불도그, 리트리버, 치와와 등의 모든 혈통의 개들을 만들어 냈다. 고작 수백 년 혹은 수천 년 동안 말이다!  ‘자연 선택’의 자리를 ‘인위 선택’으로 대체함으로써 시간을 단축했다. (그렇지만 이러한 방법도 ‘돌연변이’를 인위적으로 발생시키지는 못했다. 그냥 원하는 ‘돌연변이’를 기다렸다가 ‘선택’한 것뿐이다.)</p><p>&nbsp; ‘시도’ 와 ‘피드백’은 어떠한가? 돌연변이에 해당하는 ‘시도’조차 우리의 선택으로 발현할 수 있으며 자연 선택에 해당하는 ‘피드백’ 또한 우리가 환경을 선택적으로 바꿔가며 조절할 수 있다. 양쪽을 인위적으로 조절할 수 있다는 것은 엄청난 시간 단축을 의미한다. 또한 유전자 단위의 진화를 말하는 것이 아니므로 개체의 탄생과 짝짓기 주기를 고려하지 않아도 된다. 그러므로 우리는 이 메커니즘을 잘 이용한다면 수년 만에도 엄청난 변화를 만들어 낼 수 있다.</p><p>&nbsp; 물론 진화론에서 자연선택은 너무 가혹하다. 그 개체를 죽여 버린다. 짝짓기 경쟁에서 낙오시켜 버린다. 그렇지만 우리의 ‘피드백’은 그 정도는 아니며 견뎌낼 만하다. 용기를 내서 시도하고 피드백 받자!</p><p>&nbsp; 난 이것을 실천하기 위해서 회사 채팅방의 대화명을 ‘피드백은 언제나 환영’으로 해놨다. 피드백에 열려 있다는 것을 보여주면 솔직한 피드백이 들어오기 마련이다.</p><br /><h1 id="점진적-성장의-힘"><a href="#점진적-성장의-힘" class="headerlink" title="점진적 성장의 힘"></a>점진적 성장의 힘</h1><p>&nbsp; ‘어제보다 나은 오늘을 살아라’라는 말을 어른을 통해서든 자기계발서를 통해서든 많이 접해 왔을 것이다. 그것이 정확히 무엇을 의미하고 어떤 강력한 힘이 깃들어 있는가는 ‘진화론’을 공부하면서 깨닫게 되었다. 점진적 변화 즉, 누적의 힘이란 얼마나 강력한가. </p><p>&nbsp; 누적의 힘은 정말 엄청나다. ‘눈’이라는 복잡한 기관을 보자. ‘돌연변이’와 ‘자연 선택’이라는, 이 단순한 두 가지의 조합만으로 홍채, 수정체, 망막, 시신경, 미세근육 등으로 구성된 ‘눈’이라는 기관이 만들어졌다면 믿을 수 있겠는가? 최초의 눈은 빛을 인지하는 점 정도였을 것이다. 미세하게나마 빛을 인지할 수 있게 된 돌연변이는 개체들 사이에서 우위를 점할 수 있었을 것이다. 그 후로 망막이 생기고 수정체가 없는 상태여도 자신을 향해 다가오는 맹수 정도는 뿌옇게 구별할 수 있었을 것이다. 이런 계속되는 변화들이 누적되어 지금의 눈을 있게 하였다. 결과만 놓고 본다면 너무 대단해서 그 과정을 가늠할 수 없을 정도다. 자연에 도약이란 없다. 누적되는 사소한 변화만 있을 뿐이다.</p><p>&nbsp; 우리도 목표가 멀게 느껴져 무기력 해질 게 아니라 아주 조금씩 하루하루 성장해 나가야 한다. 그런 성장들이 누적되어 뒤돌아보면 자신이 엄청난 성장을 했음을 알게 될 것이다. 당장 변화가 느껴지지 않더라도 꾸준히 쌓아가야 한다. 결국 주목을 끌게 되어 있다.</p><blockquote><p>자연 선택은 모든 유리한 변이들을 아무리 사소하더라도 누적해 나갈 것이다. 그 변이가 충분히 발달해 우리의 주목을 끌 때까지 말이다. </p><p>- 종의 기원, 찰스 다윈 저, 장대익 역, 사이언스북스 208p</p></blockquote><br /><h1 id="아무-노력-없이-운에-의지하지-말라"><a href="#아무-노력-없이-운에-의지하지-말라" class="headerlink" title="아무 노력 없이 운에 의지하지 말라"></a>아무 노력 없이 운에 의지하지 말라</h1><p>&nbsp; 운을 바라고 넋 놓고 있다면 아무것도 이루어지지 않는다. 시도하고 피드백을 받으며 목표에 접근해야 한다. </p><p>&nbsp; 리처드 도킨스의 ‘만들어진 신’이라는 책에서 나온 흥미로운 비유가 있다. 은행 금고의 자물쇠가 있다고 해보자. 모든 숫자의 조합을 맞출 확률은 매우 낮다. 그런데 돌려서 (‘시도’에 해당) 숫자가 하나씩 들어맞을 때마다 금고 문이 조금씩 열리고 돈이 조금씩 쏟아진다면 (‘피드백’에 해당), 머지않아 금고 문은 활짝 열리게 될 것이다. 진화와 인생의 성장은 이런 식으로 작동한다.</p><p>&nbsp; 주위에서 갑자기 성공했다고 느껴지는 사람은 대부분 우리가 ‘결과’만 보고 ‘과정’을 보지 않아서 그렇다. 그 사람은 계속 무언가를 시도하고 변화해 왔을 것이다. 그러다가 자물쇠의 마지막 숫자가 맞춰지는 순간을 우리가 목격한 것이다.</p><br /><h1 id="환경을-변화시켜라"><a href="#환경을-변화시켜라" class="headerlink" title="환경을 변화시켜라"></a>환경을 변화시켜라</h1><p>&nbsp; 여기서 ‘환경’은 진화론의 ‘자연’이다. 자연이 선택하는 주체이듯, 환경은 피드백을 주는 주체이다. 날 둘러싼 모든 것들이다. ‘회사’, ‘가족’, ‘만나는 사람’, ‘책’ 등등 수도 없이 많다. 우리는 환경을 의도적으로 변화시키고 선택해서 성장해 나갈 수 있다. </p><p>&nbsp; 자연은 진화의 방향에 엄청난 영향을 미친다. 자연의 큰 변화인 빙하기는 많은 종을 멸종시키고, 개체들을 죽이고 추위에 잘 이겨내는 몇몇 개체들만 대를 이어 번성할 수 있게 만든다. 그렇게 생물이 자연 변화에 발맞춰 모피가 두꺼워지는 식으로 진화하고 나면 얼마간의 안정기가 있을 것이다. 이런 과정에서 생물은 엄청난 변화를 겪게 된다. 반대로 익숙한 환경에만 있으면 큰 변화가 일어나지 않을 것이다. </p><p>&nbsp; 우리도 환경을 변화시키며 성장을 꾀할 수 있다.  일단 내가 영향받고 싶은 환경에 나를 던져 넣어라. 그러면 반은 끝났다. 익숙한 환경에서는 ‘시도’해야지 ‘피드백’을 받을 수 있지만, 새로운 환경에 날 던져 넣으면 기존에 당연하다고 생각했던 부분까지 ‘피드백’이 침범한다. 변화되고 달라질 수밖에 없다. 환경을 잘 이용해야 한다.</p><blockquote><p>우리는 환경에 적응하며 살아간다. 그러므로 개인의 발전을 도모하고자 한다면 자신이 되고 싶은 사람으로 만들어줄 환경을 의도적으로 조성하고 통제해야 한다. 삶의 모든 것은 자연적이며 유기적인 과정이다. 우리는 자신이 선택한 환경에 맞춰 적응하고 진화한다. 당신은 환경 때문에 지금의 당신이 되었다.<br>변화를 원하는가? 그렇다면 환경을 바꿔라.</p><p>- 최고의 변화는 어디서 시작되는가, 벤저민 하디 저, 김미정 역, 비즈니스북스 208p</p></blockquote><p>&nbsp; 안 좋은 영향을 주는 ‘모임’, ‘사람’ 등이 있다면 벗어나려고 노력해야 한다. 아니면 당신이 그 사람들을 바꿔라. 당신은 상대방에게  ‘환경’이다. </p><p>&nbsp; 난 환경에 변화를 주기 위해 동료가 추천해 준 유료 ‘독서모임’에 나가기 시작했다. 내 환경에 새로운 사람들이 들어왔으며 훌륭한 사람들과 토론하며 많은 것을 느끼고 배웠다.</p><br /><h1 id="모든-피드백을-수렴할-필요는-없다"><a href="#모든-피드백을-수렴할-필요는-없다" class="headerlink" title="모든 피드백을 수렴할 필요는 없다"></a>모든 피드백을 수렴할 필요는 없다</h1><p>&nbsp; 모든 피드백을 있는 그대로 다 수렴하면 안 된다. 자연에서의 ‘자연 선택’은 거짓말하지 않는다. 그렇지만 사람이 주는 피드백은 거짓이 깃들어 있을 수 있다. 상대방을 이용하려고 하며, 자신이 느끼는 감정과는 다른 피드백을 줄 수 있다. 나의 주관을 가지고 판단해서 받아들일지 말지를 결정해야 한다. 거절이 없다면 ‘수락’조차 진정성이 없게 된다.</p><p>크게 두 가지의 잘못된 피드백이 있다.</p><h2 id="악의적인-피드백"><a href="#악의적인-피드백" class="headerlink" title="악의적인 피드백"></a>악의적인 피드백</h2><p>&nbsp; 나를 망하게 하려는 피드백이다. 나를 시기 질투, 혹은 견제를 하는 사람이 이런 피드백을 줄 확률이 높다. 잘 하는 부분을 ‘그렇게 하면 안 된다’고 하거나 하지 말아야 할 부분을 ‘그렇게 해야 해’라고 하는 경우다. </p><p>&nbsp; 예를 들어 회의에서 활약을 잘하고 있는데 상사가 ‘회의에서 너무 나서지 마!’라고 한다고 치자. 우리가 그 피드백을 그대로 받아들인다면 위축되어 성장할 기회가 줄어들 것이다. 이런 피드백은 논리가 없는 경우가 많다. 질문해서 파고들거나 그럴 수 없다면, 속으로라도 정말 의미 있는 피드백인지 판단해 보고 아니라면 받아들이지 마라! </p><h2 id="착해-빠진-피드백"><a href="#착해-빠진-피드백" class="headerlink" title="착해 빠진 피드백"></a>착해 빠진 피드백</h2><p>&nbsp; 이 사람은 내가 뭘 해도 ‘지지적’ 피드백을 준다. 옆에서 항상 ‘잘하고 있어’, ‘잘했어’를 연발한다.  거기에 취해서 잘못된 행동까지도 옳은 줄 알고 계속하게 된다. </p><p>&nbsp; 진화론에 비유하면 나무를 타는 원숭이 무리가 A 숲에 살면서 ‘아가미’를 진화시키려고 한다. A 숲은 ‘그건 낭비야!’라고 그 개체를 선택하지 않아야 하는데, 계속 ‘잘하고 있어!’ 라며 생존과 짝짓기를 종용한다. 그 원숭이가 A 숲을 벗어나 B 숲으로 간다면 어떻게 되겠는가? B 숲에 사는 정상적인 원숭이와의 생존 경쟁에서 철저히 패배할 것이다. </p><blockquote><p>어떤 야생동물이 습관적으로 어떤 쓸데없는 행동을 한다면, 자연선택은 시간과 에너지를 생존과 번식에 투자하는, 경쟁 관계에 있는 다른 개체를 선호할 것이다. 자연은 경박하고 기발한 착상에 신경 쓸 겨를이 없다. 설령 늘 그렇게 보이지는 않더라도, 냉혹한 실용주의가 이긴다.</p><p>- 만들어진 신, 리처드 도킨스 저, 이한음 역, 김영사 188p</p></blockquote><p>&nbsp; 모든 것에 지지적 피드백을 하는 사람은 나와의 관계가 깨질까 봐 혹은 내가 직장 상사, 선배인 어려운 존재여서 일 수 있다. 피드백을 먼저 요구하는 것도 좋은 방법이다. 이렇게까지 나온다면 상대방도 속마음을 꺼낼 확률이 높다.  그때 당신이 어떻게 반응하느냐가 상대방이 다음에도 용기를 내어 나에게 ‘교정적’ 피드백을 해줄 것인가를 결정한다.</p><br /><h1 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h1><p>&nbsp; ‘진화론’을 연구하고 이용하는 것을 ‘과학자’의 영역으로만 치부하고 멀리하기에는 너무 아깝다. 우리도 공부하고 이용해야 한다. 자연에는 현대 기술로 이해하지도 흉내 내지도 못하는 것들이 많다. 그 모든 생물이 이 메커니즘으로 만들어졌다! 단순한 규칙에서 복잡함이 산출되는 이 과정이 너무 장엄하고 경이롭다. 지금 내 눈에 보이는 ‘손’, 공기를 빨아들이고 있는 ‘코’, 이 글을 보고 있는 ‘눈’ 또한 이 메커니즘의 산물임을 잊어서는 안 된다.</p><p>&nbsp; 진화론에서 배운 시점의 성장은 ‘개인’ 뿐만 아니라, ‘회사’, ‘문화’, ‘기술’, ‘이론’ 등 모든 것에 해당한다. 좋은 환경을 만들고! 시도하고! 피드백 받고! 다시 시도하자! 이 단순한 규칙을 통해 하루하루 점진적으로 성장하자. 그리고 놀라운 변화를 이뤄내자!</p><h2 id="진화론-책-추천"><a href="#진화론-책-추천" class="headerlink" title="진화론 책 추천"></a>진화론 책 추천</h2><ul><li><a href="https://book.naver.com/bookdb/book_detail.nhn?bid=14068322">이기적 유전자</a>, 리처드 도킨스 저, 홍영남, 이상임 역, 을유문화사 2018</li><li><a href="https://book.naver.com/bookdb/book_detail.nhn?bid=7649310">행복의 기원</a>, 서은국 저, 21세기북스 2014</li><li><a href="https://book.naver.com/bookdb/book_detail.nhn?bid=6188263">지상 최대의 쇼</a>, 리처드 도킨스 저, 김명남 역, 김영사 2009</li><li><a href="https://book.naver.com/bookdb/book_detail.nhn?bid=6946223">진화심리학</a>, 데이비드 버스 저, 이충호 역, 웅진지식하우스 2012</li></ul><br /><span style="color:grey">이 글은 '시도'와 '피드백'으로 쓰였습니다. 피드백 해주신 어머니, 코니, 알렉스, 토니, 평만이형, 경한이형, 헌영이형, 석진이형, 승환이, 승확이, 현용이, 태희 감사합니다.</span>]]></content:encoded>
      
      <comments>https://zunik.me/2020/08/20/life-learned-from-evolution/#disqus_thread</comments>
    </item>
    
    <item>
      <title>개인용 (디지털오션)Digitalocean kubernetes 만들기</title>
      <link>https://zunik.me/2020/03/22/create-digitalocean-kubernetes/</link>
      <guid>https://zunik.me/2020/03/22/create-digitalocean-kubernetes/</guid>
      <pubDate>Sun, 22 Mar 2020 10:31:10 GMT</pubDate>
      <description>
      
        개인용 Digitalocean Kubernetes 만들기
      
      </description>
      
      
      <content:encoded><![CDATA[<p>개인용 Kubernetes를 가지고 싶었다. 환경이 갖춰져 있다면 개인 프로젝트 들을 쉽게 배포하고 체계적으로 관리할 수 있으며 새로운 것을 만들어서 올려보고 싶은 동기가 더 커질 것이라 생각했다. 또한 자연스럽게 kubernetes 와 더 친해지게 된다. </p><p>“스타트업조차도 kubernetes를 쓰는 건 overengineering이라는 말이 있던데 개인용으로 kubernetes를 쓴다고?” 라는 의문이 생길 수도 있을 것이다. 그러나 우리는 서비스 유지 가성비를 따지는 기업이 아니다.  개인 성장을 ‘가성비’에 포함한다면 절대 overengineering 이 아니다.</p><a id="more"></a><p>어떻게 kubernetes를 만들까 고민하다가 선택한 게 바로 <a href="https://www.digitalocean.com/products/kubernetes/">Digitalocean kubernetes</a>(이하 ‘DOKS’)이다. 개인이 사용하기에도 합당한 만큼 저렴하며 ‘관리형’이라서 사용하는 데에만 집중할 수 있다. 다른 업체의 관리형 kubernetes는 굉장히 비싸다. 개인이 사용하기 부담스러울 정도의 가격이다. </p><p>이 글에서는 DOKS에 대한 설명과 내부 Service를 Domain에 연결하는 것까지 다룰 것이다. kubernetes에 대한 기본적인 지식이 있다고 가정한 글이기 때문에 kubernetes를 모른다면 <a href="https://kubernetes.io/ko/docs/concepts/">공식문서</a>를 참고하자</p><p><br /><br /></p><h1 id="관리형-Kubernetes-란"><a href="#관리형-Kubernetes-란" class="headerlink" title="관리형 Kubernetes 란?"></a>관리형 Kubernetes 란?</h1><p align="center"><img src="/2020/03/22/create-digitalocean-kubernetes/components-of-kubernetes.png" class="" title="components-of-kubernetes"></p><p>관리형이란 위 Kubernetes 요소 중 ‘Kubernetes Control Plane’ 부분 전체를 Cloud 업체에서 관리해 주는 것이고 우리는 Kubernetes Nodes 부분만 신경 쓰면 된다. Node는 Cloud 업체에서 제공하는 virtual machine을 이용하게 된다. kubernetes 버전 업데이트도 해주기 때문에 굉장히 편하다.</p><p>관리형을 사용하지 않으면 Control Plane 부분도 직접 다 세팅하고 관리해야 한다. 그러면 고려할게 배 이상으로 많아지게 되는데 그것을 다 숙지하고 관리해 나가기가 어렵다. 예를 들어 ‘etcd’ 같은 경우 분산 합의 알고리즘을 사용하고 있기 때문에 홀수로 띄워야 하며 ‘*-controller-manager, kube-scheduler’는 하나만 선별되어 동작하는 ‘리더’라는 개념이 있는 등 ‘Nodes’ 에 비해서 복잡하기에 이 모든 것들을 Cloud 업체에서 제공해 주는 것이다.</p><p><br /><br /></p><h1 id="왜-관리형을-선택했나"><a href="#왜-관리형을-선택했나" class="headerlink" title="왜 관리형을 선택했나?"></a>왜 관리형을 선택했나?</h1><p>Control Plane까지 다 구축해서 사용하는 방법도 있을 것이다. 그러나 구조 이해 용도로 한 번 직접 구축해보는 것은 좋지만 거기 까지다. 난 그걸 계속 운영해 나갈 정도의 필요성을 느끼지 못했다. 관리형 kubernetes 가 적절한 타협점이었다. 그리고 이제 돈 때문에 ‘관리형’을 선택하지 않을 이유도 없다. DOKS 가 굉장히 저렴하기 때문이다.</p><p><br /><br /></p><h1 id="Digitalocean-에서-kubernetes를-발표"><a href="#Digitalocean-에서-kubernetes를-발표" class="headerlink" title="Digitalocean 에서 kubernetes를 발표!"></a>Digitalocean 에서 kubernetes를 발표!</h1><p>Digitalocean 은 굉장히 유명한 클라우드 컴퓨팅 업체이다. 가성비가 굉장히 뛰어나서 개발자들이 개인용으로도 많이 이용한다. 난 2016년부터 Ubuntu를 하나 사용하고 있었다. 언제부터 인가 Digitalocean에서 ‘kubernetes’ 서비스를 준비한다는 소식이 들려왔고 난 Digitalocean의 착한 가격을 믿고 있었기에 기대하고 있었다. 그러다가 드디어 2019년 5월 21일에 일반적으로 사용이 가능하다고 <a href="https://blog.digitalocean.com/doks-in-ga/">발표</a>가 되었다. 관리형 kubernetes 시장에 새로운 얼굴이 등장한 것이다. 2020년이 되어서 사용해 보았는데 이럴 수가?! 타 업체들에 비해서 너무 저렴한 것이다. 바로 기존에 관리하던 사이트를 DOKS로 옮기고 기존 VM 은 폐기하였다.<br><br /><br /></p><h1 id="타사와-비교"><a href="#타사와-비교" class="headerlink" title="타사와 비교"></a>타사와 비교</h1><h2 id="관리형-kubernetes-종류"><a href="#관리형-kubernetes-종류" class="headerlink" title="관리형 kubernetes 종류"></a>관리형 kubernetes 종류</h2><ul><li>Digitalocean의 <a href="https://www.digitalocean.com/products/kubernetes/">DOKS</a> (DigitalOcean Kubernetes)<ul><li>Node 로 Droplets를 사용한다.</li></ul></li><li>Amazon의 <a href="https://aws.amazon.com/ko/eks">EKS</a> (Elastic Kubernetes Service)<ul><li>Node 로 EC2를 사용한다.</li><li>현재 회사에서 사용하고 있다.</li></ul></li><li>Google의 <a href="https://cloud.google.com/kubernetes-engine">GKE</a> (Google Kubernetes Engine)<ul><li>Node 로 GCE를 사용한다.</li></ul></li><li>Microsoft의 <a href="https://azure.microsoft.com/ko-kr/services/kubernetes-service/">AKS</a> (Azure Kubernetes Service)<ul><li>Node 로 Azure VM을 사용한다.</li></ul></li></ul><br /><h2 id="가격-비교"><a href="#가격-비교" class="headerlink" title="가격 비교"></a>가격 비교</h2><p>DOKS는 가장 낮은 Node를 두 개 선택하면 $20(월)로 사용할 수 있다. Node를 하나만 세팅이 가능하나 kubernetes 답지 못하며 Digitalocean에서도 <code>Recommended: A minimum of 2 nodes is required to prevent downtime during upgrades or maintenance.</code> 라고 경고가 뜬다. (리소스가 많이 필요하지 않고 downtime 이 발생해도 상관없다면 1개만 띄워도 된다. 그럼 $10(월)로 사용할 수 있다.)</p><p>다른 Cloud 업체들도 최대한 제일 낮으면서 비슷한 사양으로 비교했다. EKS, GKS, AKS 모두 (Seoul region) 기반 가격이다. </p><p>(돈 단위 : USD)</p><table><thead><tr><th align="left"></th><th align="left">클러스터 유지비 (월)</th><th align="left">노드 (vCPU/Memory)</th><th align="left">노드 X 2 유지비 (월)</th><th align="left">총 유지비 (월)</th></tr></thead><tbody><tr><td align="left"><strong>DOKS</strong></td><td align="left">Free</td><td align="left">No name (1,2GiB)</td><td align="left">10X2=20</td><td align="left">20</td></tr><tr><td align="left"><strong>EKS</strong></td><td align="left">73</td><td align="left">t2.small (1,2GiB)</td><td align="left">21.09X2=42.18</td><td align="left">115.18</td></tr><tr><td align="left"><strong>GKE</strong></td><td align="left">73</td><td align="left">n1-standard-1 (1,3.75GiB)</td><td align="left">31.17X2=62.34</td><td align="left">135.34</td></tr><tr><td align="left"><strong>AKS</strong></td><td align="left">Free</td><td align="left">D1 v2 (1,3.5GiB)</td><td align="left">60.23X2=120.46</td><td align="left">120.46</td></tr></tbody></table><p>가격 차이가 굉장히 크다. 혼자서 사용하는데 월 10만원 이상은 좀 부담스럽다. 실제로 직장 동료 중 EKS를 공부용으로 사용했다가 많은 돈이 청구되신 분도 있다. 타사들의 관리형 Kubernetes는 사실상 기업 전용이라고 생각한다. 가격차이가 나는 이유는 그만큼 연계되어 제공해 주는 서비스가 많아서 그렇다고 생각한다. 그렇지만 개인은 DOKS로 충분하다. Digitalocean 도 개인이 필요할 만한 서비스는 충분히 갖추고 있기 때문이다.<br><br /></p><h2 id="타당한-가격인가"><a href="#타당한-가격인가" class="headerlink" title="타당한 가격인가?"></a>타당한 가격인가?</h2><p>월 20 달러도 크게 느껴질 수도 있다. 어쨌든 우리가 토이 프로젝트를 띄우거나 사이트를 올리려면 서버는 필요할 것이며 VM에 지불하는 돈이 나갈 것이다. 서버 환경에 대한 문제로 프로젝트에 따라서 여러 VM이 필요해질 수도 있다. $10(월) 짜리 VM 두 개만 생겨도 가격이 똑같다. 각각의 VM은 자원을 공유하지 못하며 서로 노는 자원이 발생할 것이다. 그러나 Kubernetes를 사용한다면 환경 충돌 걱정 없이 서버 자원을 공유하고 Kubernetes의 장점들은 온전히 사용할 수 있다. </p><p>DOKS는 ‘persistent volume’도 Digitalocean Volumne 을 통해 간단하게 지원하기 때문에 나는 DB도 모두 하나의 DOKS로 관리하고 있다. </p><p><br /><br /></p><h1 id="DOKS-생성하기"><a href="#DOKS-생성하기" class="headerlink" title="DOKS 생성하기"></a>DOKS 생성하기</h1><h2 id="회원가입"><a href="#회원가입" class="headerlink" title="회원가입"></a>회원가입</h2><p><a href="https://m.do.co/c/baa349f55fe4">추천인 링크</a>로 들어가서 가입을 하시면 결제수단을 등록했을 때 60일 동안 사용할 수 있는 <code>$100</code>를 받을 수 있습니다. 만약 추가로 <code>$25</code>이상 사용하신다면 저도 <code>$25</code>를 받게 됩니다. <a href="https://www.digitalocean.com/referral-program/">추천인 제도에 대한 자세한 설명입니다</a> <code>$100</code>라면 두 달 동안 마음껏 사용하실 수 있습니다.<br><br /></p><h2 id="cluster-생성하기"><a href="#cluster-생성하기" class="headerlink" title="cluster 생성하기"></a>cluster 생성하기</h2><p align="center"><img src="/2020/03/22/create-digitalocean-kubernetes/1-1.png" class=""></p><p>로그인을 하면 보이는 오른쪽 상단에 ‘Create’ 버튼을 통해 cluster 생성 페이지로 이동한다.<br><br /></p><p align="center"><img src="/2020/03/22/create-digitalocean-kubernetes/1-2.png" class=""></p><p>생성 페이지로 가면 처음에 버전을 선택하게 되는데 특별한 경우가 아니면 이미 선택되어 있는 latest 버전을 사용하도록 하자. region 은 San Francisco 2 로 선택하자 현재 한국에서 가장 빠르다. <a href="http://speedtest-sfo2.digitalocean.com/">여기서</a> region 별 속도 테스트를 직접 해볼 수 있다.<br><br /></p><p align="center"><img src="/2020/03/22/create-digitalocean-kubernetes/1-3.png" class=""></p><p>Node를 결정하는 부분이다. 월 $10짜리 2개로 맞추자. cluster 가 만들어지고 나서도 언제든 바꿀 수 있다.<br><br /></p><p align="center"><img src="/2020/03/22/create-digitalocean-kubernetes/1-4.png" class=""></p><p>마음에 드는 이름으로 변경하고 ‘Create Cluster’를 눌러주자. 나는 ‘create-digitalocean-kubernetes’로 했다.<br><br /></p><p align="center"><img src="/2020/03/22/create-digitalocean-kubernetes/1-5.png" class=""></p><p>5분 정도 기다리면 kubernetes cluster 가 만들어진다. Kubernetes 생성은 이제 끝났다. (벌써..?) Digitalocean 은 Cluster 별로 ‘Kubernetes Dashboard’를 제공한다. 우리의 kubernetes 자원을 이용하여 띄우는 게 아니고 별도로 띄워준다. 즉 우리는 Kubernetes Dashboard에 대해 사용료를 지불하지 않는다. (Digitalocean 사랑합니다..) 오른쪽 상단에 ‘Kubernetes Dashboard’를 클릭해보자.<br><br /> </p><p align="center"><img src="/2020/03/22/create-digitalocean-kubernetes/1-6.png" class=""></p><p>우리의 kubernetes Dashboard 화면이다. command line 을 통해서가 아니더라도 여기서 많은 정보들을 확인할 수 있다. Kubernetes Dashboard에 대한 자세한 정보는 <a href="https://kubernetes.io/ko/docs/tasks/access-application-cluster/web-ui-dashboard/">여기</a>를 확인해보자.</p><p><br /><br /></p><h1 id="DOKS-사용하기"><a href="#DOKS-사용하기" class="headerlink" title="DOKS 사용하기"></a>DOKS 사용하기</h1><p>이제 환경이 갖춰졌다. San Francisco에 나만의 Kubernetes 가 돌아가고 있는 것이다. 든든하다. 이제 내부에 서버를 띄워 밖으로 연결하는 작업을 해볼 것이다.</p><h2 id="kubectl-연결하기"><a href="#kubectl-연결하기" class="headerlink" title="kubectl 연결하기"></a>kubectl 연결하기</h2><p>자신의 컴퓨터에서 Kubernetes를 조작하려면 연결이 필요하다. kubectl 을 사용할 것이다. kubectl 은 Kubernetes command-line tool이다. </p><figure class="highlight plain"><figcaption><span>shell</span></figcaption><table><tr><td class="code"><pre><span class="line">$ brew install kubectl </span><br></pre></td></tr></table></figure><p>mac 을 사용한다면 위와 같이 brew를 통해 간단하게 설치가 가능하다. 그 외 OS는 <a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/">여기</a>를 보고 설치를 하자<br><br /></p><p align="center"><img src="/2020/03/22/create-digitalocean-kubernetes/2-1.png" class=""></p><p>자신의 kubernetes cluster 페이지에 보면 ‘Download Config File’버튼이 있다. 버튼을 눌러 local에 다운받자<br><br /></p><figure class="highlight plain"><figcaption><span>shell</span></figcaption><table><tr><td class="code"><pre><span class="line">$ mv ~&#x2F;Downloads&#x2F;create-digitalocean-kubernetes-kubeconfig.yaml ~&#x2F;.kube&#x2F;config</span><br></pre></td></tr></table></figure><p>다운로드한 파일을 해당 위치로 이름을 바꾸며 옮기자 옮겨지면 kubectl 이 자동으로 설정을 인지할 것이다.<br><br /></p><figure class="highlight plain"><figcaption><span>shell</span></figcaption><table><tr><td class="code"><pre><span class="line">$ kubectl config view</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>Output</span></figcaption><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">clusters:</span><br><span class="line">- cluster:</span><br><span class="line">    certificate-authority-data: DATA+OMITTED</span><br><span class="line">    server: https:&#x2F;&#x2F;d6acccc2-1275-4437-82b1-85af2728d9d9.k8s.ondigitalocean.com</span><br><span class="line">  name: do-sfo2-create-digitalocean-kubernetes</span><br><span class="line">contexts:</span><br><span class="line">- context:</span><br><span class="line">    cluster: do-sfo2-create-digitalocean-kubernetes</span><br><span class="line">    user: do-sfo2-create-digitalocean-kubernetes-admin</span><br><span class="line">  name: do-sfo2-create-digitalocean-kubernetes</span><br><span class="line">current-context: do-sfo2-create-digitalocean-kubernetes</span><br><span class="line">kind: Config</span><br><span class="line">preferences: &#123;&#125;</span><br><span class="line">users:</span><br><span class="line">- name: do-sfo2-create-digitalocean-kubernetes-admin</span><br><span class="line">  user:</span><br><span class="line">    token: ****</span><br></pre></td></tr></table></figure><p>kubectl에 설정이 잘 적용된 것을 볼 수 있다. 이제 kubernetes를 컨트롤할 수 있는 환경이 갖춰졌다.<br><br /></p><h2 id="Deployment-Service-생성하기"><a href="#Deployment-Service-생성하기" class="headerlink" title="Deployment, Service 생성하기"></a>Deployment, Service 생성하기</h2><p>주어진 text를 출력해 주는 <a href="https://hub.docker.com/r/hashicorp/http-echo">hashicorp/http-echo</a>라는 아주 간단한 이미지를 kubernetes에 띄워보자.</p><figure class="highlight yaml"><figcaption><span>hello-first.yaml</span><a href="/downloads/code/create-digitalocean-kubernetes/hello-first.yaml">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello-first</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">5678</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">hello-first</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello-first</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">hello-first</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">hello-first</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">hello-first</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">hashicorp/http-echo</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">"-text=Hello from the first deployment!"</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">5678</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><figcaption><span>hello-second.yaml</span><a href="/downloads/code/create-digitalocean-kubernetes/hello-second.yaml">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello-second</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">5678</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">hello-second</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello-second</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">hello-second</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">hello-second</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">hello-second</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">hashicorp/http-echo</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">"-text=Hello from the second deployment!"</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">5678</span></span><br></pre></td></tr></table></figure><p>추후 routing 테스트를 위하여 두 개의 Deployment를 작성하였다. hello-first는 ‘Hello from the first deployment!’로 hello-second는 ‘Hello from the second deployment!’로 각기 다른 text를 출력해 줄 것이다.<br><br /></p><figure class="highlight plain"><figcaption><span>shell</span></figcaption><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f hello-first.yaml -f hello-second.yaml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>Output</span></figcaption><table><tr><td class="code"><pre><span class="line">service&#x2F;hello-first created</span><br><span class="line">deployment.apps&#x2F;hello-first created</span><br><span class="line">service&#x2F;hello-second created</span><br><span class="line">deployment.apps&#x2F;hello-second created</span><br></pre></td></tr></table></figure><p>kubectl apply로 두 개의 파일을 kubernetes에게 만들라고 명령하였다.<br><br /></p><figure class="highlight plain"><figcaption><span>shell</span></figcaption><table><tr><td class="code"><pre><span class="line">$ kubectl get pods</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>Output</span></figcaption><table><tr><td class="code"><pre><span class="line">NAME                            READY   STATUS    RESTARTS   AGE</span><br><span class="line">hello-first-b5785588f-xdhcj     1&#x2F;1     Running   0          9m25s</span><br><span class="line">hello-second-797c6c6d87-pdwpg   1&#x2F;1     Running   0          9m25s</span><br></pre></td></tr></table></figure><p>성공적으로 돌아가고 있는 것이 확인된다. 그렇지만 아직 밖에서 접근을 못하는 상황이다. DOKS는 Load Balancer를 통해서 외부와 통신할 수 있다. Service마다 Load Balancer를 바로 연결할 수 있지만 개당 가격이 월 $10이기 때문에 서비스마다 연결하기엔 가격이 부담스럽다.<br><br /></p><h2 id="nginx-ingress-설치하기"><a href="#nginx-ingress-설치하기" class="headerlink" title="nginx-ingress 설치하기"></a>nginx-ingress 설치하기</h2><p>nginx-ingress를 사용하면 Load Balancer를 하나만 만들고 트래픽 라우팅을 통해 여러 Service를 연결할 수 있다. nginx-ingress를 간단하게 설치하고 관리하려면 helm 이 필요하다. helm 은 Kubernetes 용 package managing tool이다. python에 pip, javascript에 npm 과 비슷하다고 생각하면 된다.</p><figure class="highlight plain"><figcaption><span>shell</span></figcaption><table><tr><td class="code"><pre><span class="line">$ brew install helm </span><br></pre></td></tr></table></figure><p>mac 을 사용한다면 위와 같이 brew를 통해 간단하게 설치가 가능하다. 그 외 OS는 <a href="https://helm.sh/docs/intro/install/">여기</a>를 보고 설치를 하자. 설치를 완료하면 helm 은 kubectl 과 같은 설정을 사용하기 때문에 자동으로 kubernetes 와 연결이 된다.<br><br /></p><figure class="highlight plain"><figcaption><span>shell</span></figcaption><table><tr><td class="code"><pre><span class="line">$ helm install nginx-ingress stable&#x2F;nginx-ingress --set controller.publishService.enabled&#x3D;true</span><br><span class="line">$ helm list</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>Output</span></figcaption><table><tr><td class="code"><pre><span class="line">NAME            NAMESPACE       REVISION        UPDATED                                 STATUS          CHART                   APP VERSION</span><br><span class="line">nginx-ingress   default         1               2020-03-22 15:57:24.358441 +0900 KST    deployed        nginx-ingress-1.33.0    0.30.0</span><br></pre></td></tr></table></figure><p><code>helm install</code>로 nginx-ingress를 설치한다. <code>controller.publishService.enabled</code> 옵션을 통해 Load Balancer를 자동으로 만들어 줄 수 있다. 설치 후 <code>helm list</code>로 확인해보면 0.30 버전으로 잘 설치되어 있다.<br><br /></p><figure class="highlight plain"><figcaption><span>shell</span></figcaption><table><tr><td class="code"><pre><span class="line">$ kubectl get services -w nginx-ingress-controller</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>Output</span></figcaption><table><tr><td class="code"><pre><span class="line">NAME                       TYPE           CLUSTER-IP       EXTERNAL-IP      PORT(S)                      AGE</span><br><span class="line">nginx-ingress-controller   LoadBalancer   10.245.202.210   157.230.197.35   80:32019&#x2F;TCP,443:31635&#x2F;TCP   4m34s</span><br></pre></td></tr></table></figure><p>get service에 -w (watch) 옵션을 더해 nginx-ingress-controller를 관찰하고 있자. EXTERNAL-IP 가 비어있다가 생기는 것을 확인할 수 있을 것이다. Load Balancer를 발급받는 과정이다. 이제 EXTERNAL-IP에 나와있는 IP로 Kubernetes 내부에 접근이 가능하다.<br><br /></p><p align="center"><img src="/2020/03/22/create-digitalocean-kubernetes/2-2.png" class=""></p><p>digitalocean에 들어가 보면 Load Balancer 하나가 만들어져있다. IP Address를 보면 kubectl로 보았던 EXTERNAL-IP 와 똑같은 것을 확인할 수 있다. (하단에 21일 전에 만들어진 Load Balancer는 기존에 내가 사용하고 있는 것이다.)<br><br /></p><h2 id="nginx-ingress-경로-기반-라우팅"><a href="#nginx-ingress-경로-기반-라우팅" class="headerlink" title="nginx-ingress 경로 기반 라우팅"></a>nginx-ingress 경로 기반 라우팅</h2><figure class="highlight yaml"><figcaption><span>hello-ingress-path.yaml</span><a href="/downloads/code/create-digitalocean-kubernetes/hello-ingress-path.yaml">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello-ingress</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/first</span> </span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">serviceName:</span> <span class="string">hello-first</span></span><br><span class="line">          <span class="attr">servicePort:</span> <span class="number">80</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/second</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">serviceName:</span> <span class="string">hello-second</span></span><br><span class="line">          <span class="attr">servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>shell</span></figcaption><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f hello-ingress-path.yaml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>Output</span></figcaption><table><tr><td class="code"><pre><span class="line">ingress.extensions&#x2F;hello-ingress created</span><br></pre></td></tr></table></figure><p>ingress yaml 파일을 작성하여 kubernetes에 적용시켜준다. path로 라우팅 되며 ‘/first’는 아까 만든 hello-first로 ‘/second’는 hello-second로 연결해 준다.<br><br /> </p><p align="center"><img src="/2020/03/22/create-digitalocean-kubernetes/3-1.png" class=""><img src="/2020/03/22/create-digitalocean-kubernetes/3-2.png" class=""></p><p>발급받은 Load Balancer IP 로 뒤에 path를 붙여서 접근해보자. 하나의 Load Balancer로 두 개의 Service를 서빙하고 있는 것을 확인할 수 있다. 이제 어떤 서비스든 외부에서 접근을 할 수 있게 되었다.<br><br /></p><h2 id="nginx-ingress-도메인-기반-라우팅"><a href="#nginx-ingress-도메인-기반-라우팅" class="headerlink" title="nginx-ingress 도메인 기반 라우팅"></a>nginx-ingress 도메인 기반 라우팅</h2><p>도메인을 가지고 있다면 도메인을 통해 라우팅이 가능하다. 몇 개의 도메인이든 연결이 가능하며 나는 2개의 도메인을 각각의 service에 연결해 보겠다.</p><p align="center"><img src="/2020/03/22/create-digitalocean-kubernetes/4-1.png" class=""></p><p>먼저 Load Balancer IP로 도메인들을 연결해 준다.<br><br /></p><figure class="highlight yaml"><figcaption><span>hello-ingress-host.yaml</span><a href="/downloads/code/create-digitalocean-kubernetes/hello-ingress-host.yaml">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello-ingress</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">first.zunik.me</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">serviceName:</span> <span class="string">hello-first</span></span><br><span class="line">          <span class="attr">servicePort:</span> <span class="number">80</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">second.zunik.me</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">serviceName:</span> <span class="string">hello-second</span></span><br><span class="line">          <span class="attr">servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>shell</span></figcaption><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f hello-ingress-host.yaml</span><br></pre></td></tr></table></figure><p>각각의 도메인에 따라서 다른 Service로 보내주도록 ingress files 을 변경해 주고 적용한다.<br><br /></p><p align="center"><img src="/2020/03/22/create-digitalocean-kubernetes/4-2.png" class=""><img src="/2020/03/22/create-digitalocean-kubernetes/4-3.png" class=""></p><p>도메인으로 잘 연결되는 것을 확인할 수 있다. 또한 (경로, 도메인) 기반은 혼합해서도 얼마든지 사용이 가능하다.<br><br /></p><h2 id="정리하기"><a href="#정리하기" class="headerlink" title="정리하기"></a>정리하기</h2><p>모든 연습이 끝났다면 관련 자원을 모두 정리하자.</p><figure class="highlight plain"><figcaption><span>shell</span></figcaption><table><tr><td class="code"><pre><span class="line">$ kubectl delete -f hello-first.yaml -f hello-second.yaml -f hello-ingress-host.yaml</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>Output</span></figcaption><table><tr><td class="code"><pre><span class="line">service &quot;hello-first&quot; deleted</span><br><span class="line">deployment.apps &quot;hello-first&quot; deleted</span><br><span class="line">service &quot;hello-second&quot; deleted</span><br><span class="line">deployment.apps &quot;hello-second&quot; deleted</span><br><span class="line">ingress.extensions &quot;hello-ingress&quot; deleted</span><br></pre></td></tr></table></figure><p> nginx-ingress 와 Load Balancer는 그대로 있기에 여기 기반에서 뭐든 올려서 사용할 수 있을 것이다.</p><p><br /><br /></p><h1 id="마지막으로"><a href="#마지막으로" class="headerlink" title="마지막으로"></a>마지막으로</h1><p>이제 우리에게 개인용 kubernetes cluster 가 생겼다. Load Balancer까지 붙인다면 월 $30가 들기 때문에 이 친구는 우리에게 얼른 뭐든 올려달라고, 무슨 토이 프로젝트든 시작하라고 자극하고 동기를 부여할 것이다. 이런 장치들을 많이 마련해 놔야 우리가 계속 움직일 수 있지 않을까?</p>]]></content:encoded>
      
      <comments>https://zunik.me/2020/03/22/create-digitalocean-kubernetes/#disqus_thread</comments>
    </item>
    
    <item>
      <title>선순환 구조</title>
      <link>https://zunik.me/2019/07/10/virtuous-cycle/</link>
      <guid>https://zunik.me/2019/07/10/virtuous-cycle/</guid>
      <pubDate>Tue, 09 Jul 2019 15:58:21 GMT</pubDate>
      <description>
      
        &lt;p&gt;모든 일에는 순환이 있다. 악순환으로 인해 삶이 나쁜 영향을 받기도 하고, 선순환을 경험하고도 활용하지 못한다. 우리가 순환을 이해하고 있다면 악순환을 막을 수 있고, 선순환을 지속시킬 수 있지 않을까? 심지어 악순환을 선순환으로 바꿀 수도 있을 것이다. 이렇게 순환을 이해하고 움직이는 것을 나는 ‘순환 경영’이라 부른다. ‘나’라는 기업의 최고 경영자(CEO)가 되어 순환을 효율적으로 경영해보자.&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>모든 일에는 순환이 있다. 악순환으로 인해 삶이 나쁜 영향을 받기도 하고, 선순환을 경험하고도 활용하지 못한다. 우리가 순환을 이해하고 있다면 악순환을 막을 수 있고, 선순환을 지속시킬 수 있지 않을까? 심지어 악순환을 선순환으로 바꿀 수도 있을 것이다. 이렇게 순환을 이해하고 움직이는 것을 나는 ‘순환 경영’이라 부른다. ‘나’라는 기업의 최고 경영자(CEO)가 되어 순환을 효율적으로 경영해보자.<br> <a id="more"></a><br>순환을 경영하려면 먼저 순환에 대한 이해가 필요하다. 이 글을 통해 순환에 대한 이해를 함께 키우고자 한다. ‘순환 경영’은 성장의 원리이다. 이것을 이해하는 순간 삶에 중요한 열쇠를 쥔 것만 같았다. 이 열쇠를 공유하고자 한다. </p><br><h1 id="순환"><a href="#순환" class="headerlink" title="순환"></a>순환</h1><h2 id="순환-이란"><a href="#순환-이란" class="headerlink" title="순환 이란?"></a>순환 이란?</h2><p>순환은 어떤 일들이 꼬리를 물고 반복되는 것을 말한다. (1 -&gt; 2 -&gt; 3 -&gt; 1) 이러한 모양처럼 1로 시작해 단계를 거쳐 다시 1로 돌아오는 것이다. 순환을 이루는 일들에는 좋은 게 있을 수도 있고 나쁜 게 있을 수도 있다.</p><h2 id="선순환-악순환의-예"><a href="#선순환-악순환의-예" class="headerlink" title="선순환 악순환의 예"></a>선순환 악순환의 예</h2><p>선순환과 악순환은 어떤 것 들이 있는가? </p><ul><li>경쟁에서 우위를 점하게 된 음식점은 식재료가 계속 신선하게 공급되며 판매 상승으로 이어진다. 반면 경쟁에서 밀린 음식점은 판매 저하로 식재료의 신선도가 떨어지고 그것은 또다시 판매 저하로 이어진다. </li><li>대우가 좋은 회사는 인재를 끌어들이고 그것은 수익으로 이어지며 더 좋은 대우를 제공해 줄 수 있게 된다. 반면 대우가 좋지 않은 회사는 있던 인재도 떠나가고 수익이 떨어지게 되며 더 대우가 안 좋아진다. </li><li>자신감이 강한 사람은 매사에 용감하고 끊임없이 새로운 성공을 거두어 자신감이 더 강해진다. 반면 자신감이 모자란 사람은  매사에 용기가 없으며 결국 자기를 비하하고 실패하여 자신감이 더욱 떨어진다.</li></ul><br><h1 id="자원"><a href="#자원" class="headerlink" title="자원"></a>자원</h1><h2 id="자원-이란"><a href="#자원-이란" class="headerlink" title="자원 이란?"></a>자원 이란?</h2><p>‘자원’은 순환의 연료이다. 또한 ‘자원’은 순환을 통해 얻어진다. 순환이란 것은 자원을 투자하고 얻어내는 것의 반복이다. 투자한 자원보다 많은 자원을 얻어내면 선순환이고 적은 자원을 얻어내면 악순환이다. 모든 자원은 순환에 영향을 준다. 돈이 없다고 해서 선순환을 이룰 수 없는 게 아니다. ‘돈’은 수많은 자원 중 하나일 뿐이다. 한 사람이 갖는 특출난 자원을 순환에 넣어 잘 굴리면 ‘돈’뿐만 아니라 다른 자원들도 증가시킬 수 있다.</p><p>삶에서의 자원의 종류와 자원과 순환의 관계를 이해하고 있으면 효율적으로 자원을 모으고 사용할 수 있다.</p><h2 id="자원의-종류"><a href="#자원의-종류" class="headerlink" title="자원의 종류"></a>자원의 종류</h2><ul><li><strong>돈</strong> : 사람이 인식하고 있는 대표적인 자원이다.</li><li><strong>시간</strong> : 시간은 모두에게 평등한 것 같지만 그렇지 않다.<ul><li>다른 자원을 통해 시간을 얻을 수 있다.<ul><li>돈을 더 투자하여 버스 대신 KTX를 탄다.</li><li>비서를 고용한다.</li><li>뛰어난 기술력으로 일을 더 빨리 끝낸다.<ul><li>시간을 통해 다른 자원을 얻을 수 있다. </li></ul></li><li>하루 8시간을 일해서 돈을 번다.</li><li>시간을 투자하여 책을 읽는다.</li></ul></li><li>즉 시간도 자원이며 사람마다 가지고 있는 양이 다르다.</li></ul></li><li><strong>SNS 팔로워/구독자</strong> : 21세기가 되며 하나의 중요한 자원이 되었다. 마케팅 창구를 가지고 있는 셈이다.<ul><li>다른 사람에게 돈을 받고 광고를 해주거나 자신의 사업과 매력을 마케팅 할 수도 있다. </li><li>500만 명의 팔로우를 가진 가수와 500명의 팔로우 가진 가수가 팔로우 외에 똑같은 조건에서 앨범을 발매했을 때 누가 더 큰 이익을 얻을지는 뻔하다.</li></ul></li><li><strong>기분</strong> : 단순해 보이지만 굉장히 중요하다. 여러 순환에 가장 빨리 영향을 줄 수 있다.</li><li><strong>자존감</strong> : (자기 존중감) 있는 그대로 자기를 존중하는 마음이다. 삶을 행복하게 하는 데 크게 기여한다</li><li><strong>자신감</strong> : (자기 신뢰감) 뭔가를 할 수 있는 능력에 대한 믿음</li><li><strong>가치관</strong> : 옳은 것과 바람직한 것을 판단하는 관점</li><li><strong>지혜</strong> : 대안들 사이에서 효과적인 선택을 하는 능력</li><li><strong>건강</strong> : 순환들이 돌아가는 토대이다. 건강이 휘청거리면 전체가 휘청거린다.</li><li><strong>대인 관계</strong> : 좋은 대인 관계는 굉장히 큰 자원이다.</li><li><strong>특정 분야 기술</strong> : 나로 치면 코딩 기술, 춤 등이 될 수 있겠다.</li><li><strong>명성, 이미지, 브랜드</strong> : 외부에 보이는 나의 이미지이다. <ul><li>스타가 내놓은 상품은 더 쉽게 대중의 관심을 받을 수 있다. </li><li>광고주들은 스타들의 명성, 이미지, 브랜드에 돈을 지불한다.</li><li>가수가 이름을 날리면 관심 가져주지도 않던 이전 음원들까지 역주행한다.</li></ul></li></ul><p>이외에도 다양한 자원들이 있다. </p><h2 id="자원의-등급"><a href="#자원의-등급" class="headerlink" title="자원의 등급"></a>자원의 등급</h2><p>자원에 중요성을 매기는 방식이다. 2급은 사용하면 소모되는 자원이며 1급은 사용할수록 더 향상되는 자원이다 </p><ul><li><strong>2급 자원</strong> : 사용하면 소모 (예 : 돈) </li><li><strong>1급 자원</strong> : 사용하면 향상 (예 : 지식, 지혜, 기술,  가치관)</li></ul><p>가능한 2급을 투자하여 1급 자원으로 변환하자. 학원에 다니거나 과외를 듣거나 책을 사서 읽고 시간을 투자해서 공부하자. ‘나’라는 은행에 2급 자원을 1급 자원으로 변환해 저장하는 것이다. 돈은 지독한 악순환이나 실수를 통해 날아갈 수도 있지만 1급 자원은 쉽사리 날아가지 않는다. 잘 저장해둔 1급 자원은 위기의 순간에 다시 돈을 벌어다 줄 것이다. 1급 자원을 축적하는 행동은 진정으로 자신을 성장하게 만들어 준다</p><p>당신이라면 사용할수록 향상되는 자원과 소모되는 자원 중에 어떤 걸 더 많이 소유하고 있고 싶은가? 난 당연히 1급이다. </p><br><h1 id="순환과-자원"><a href="#순환과-자원" class="headerlink" title="순환과 자원"></a>순환과 자원</h1><h2 id="자원은-어떻게-사용되는가"><a href="#자원은-어떻게-사용되는가" class="headerlink" title="자원은 어떻게 사용되는가?"></a>자원은 어떻게 사용되는가?</h2><p align="center"><img src="/2019/07/10/virtuous-cycle/virtuous_cycle_animation_600.gif" class="" title="선순환 애니메이션"></p>(기술, 자존감, 기분 등의 자원을 수치화할 수는 없지만, 이해를 위해서 이렇게 표현하였다.)<p>위의 예시는 ‘선순환’이다. 선순환을 잘 이용한다면 당신의 자원 창고에 지속해서 자원들을 쌓아줄 것이다. 그리고 더 많은 자원을 얻으려면 자원을 투자해야 한다는 사실도 기억하자. 아무것도 투자하지 않고 선순환을 기대할 수는 없다. 한 번 들어온 자원이 순환되지 않게 붙잡고 있다면 아무 일도 일어나지 않는다. 자원이 자원을 불러오게 만들어야 한다. </p><p>사실 순환이란 것은 “연봉 상승”, “공부 투자”, “실력 상승”, “회사 기여”와 같은 몇 개의 요소로만 구성되어 있지 않다. 사람이 인식하지 못할 정도의 많은 요소가 연결되어 있고 서로 영향을 미친다. 그러나 중요한 건 “사람이 인식하지 못할 정도”란 것이다. 사람은 자신이 인식한 것만 컨트롤 할 수 있다. 그러니 우리가 인식하지 못한 요소들을 추상화(단순화)해야 한다. 그것의 결과물이 위의 그림이다.</p><h2 id="자원은-어떻게-공유-되는가"><a href="#자원은-어떻게-공유-되는가" class="headerlink" title="자원은 어떻게 공유 되는가?"></a>자원은 어떻게 공유 되는가?</h2><p>위의 예는 단순하게 하나의 순환만 자원에 영향을 주고 있다. 그러나 실제로는 자원을 쌓고 있는 와중에도 다른 순환들이 자원을 채우거나 소모한다.</p><p>대기업의 문어발 사업을 떠올려 보자. 사업 하나하나가 각각의 순환이 된다. 새로운 순환(사업)을 만들 때 기존에 보유한 자원 (돈, 인력, 기술력)으로 남들보다 유리한 위치에서 시작할 수 있다. 그리고 어떤 사업이 잘 안 되고 있을 때 (악순환) 다른 잘 되는 사업(선순환)에서 얻은 자원을 이용해서 적자를 멈추고 흑자로 돌릴 수 있다. 이 모든 것이 가능한 것은 기업의 자원이 공유되고 있기 때문이다.</p><p align="center"><img src="/2019/07/10/virtuous-cycle/virtuous_octopus.jpg" class="" title="문어발 순환"></p><p>개인도 똑같다. 하나의 작은 기업이며. 여러 순환을 가지고 살아간다.</p><ul><li>일이 안 풀릴 때 취미 생활로 스트레스를 풀고 다시 일로 돌아오면 잘 풀릴 때가 있다.<ul><li>취미 생활은 또 다른 순환이며 ‘기분’, ‘대인 관계’ 등의 다양한 자원들을 증가시켜준다. 결국 향상된 자원들이 안 풀리고 있는 순환에도 영향을 미치며 선순환이 될 수 있는 가능성에 기여한다.</li></ul></li><li>어떤 분야에서 ‘부’와 ‘명성’을 얻은 사람은 새로운 분야로 진출해도 잘 될 가능성이 높다<ul><li>‘부’와 ‘명성’ 이 있다면 무엇을 시작해도 사람들의 관심을 끌어 자동으로 마케팅 효과를 누릴 수 있다. 또한 ‘돈’을 크게 투자할 수 있어 쉽게 선순환을 만들 수 있다. 몇 번의 악순환이 있더라도 버틸 수 있는 자원이 있다. 다른 사람이라면 쓰러질 것도, 버티며 선순환의 기회를 엿볼 수 있다.</li></ul></li><li>운동을 시작하고 삶이 전체적으로 좋아졌다.<ul><li>운동은 삶에 활력을 높여 주며 다른 순환들에도 활력을 불어넣어 준다. 또한 사람이 하는 모든 순환에는 체력이 밑바탕이 된다. 앉아서 하는 일도 체력이 있어야 오래 집중할 수 있다.</li></ul></li><li>큰 상처를 받게 되어 모든 게 하락한다.<ul><li>큰 상처를 받게 되면 ‘기분’, ‘자존감’ 등의 자원이 급격히 하락하게 된다. 모든 순환에 영향을 주어 선순환마저도 점점 느려지다가 악순환으로 바뀌게 된다. </li></ul></li></ul><p>자원이 공유된다는 것을 이해한다면 순환들을 경영하여 삶을 효과적으로 만들어 갈 수 있다.  </p><br><h2 id="순환의-가속"><a href="#순환의-가속" class="headerlink" title="순환의 가속"></a>순환의 가속</h2><p>순환에 가속도가 붙으면. 급격히 성장하거나 급격히 몰락한다. 이것을 이해해야 급격한 성장을 이용할 수 있고, 급격한 몰락을 피할 수 있다.</p><h3 id="선순환-가속"><a href="#선순환-가속" class="headerlink" title="선순환 가속"></a>선순환 가속</h3><p>예를 들어 무명 래퍼가 있다. 별로 주목받지 못하다가. 어떠한 계기로 명성을 얻게 된다 (음원 대박, 유명 래퍼 피처링, 레이블 입단, 매체를 통해 등등). ‘명성’이라는 자원이 급격히 커진다. ‘명성’이라는 자원은 기존에 돌고 있던 순환들에 가속을 붙인다. 이 과정에서 악순환이 선순환으로 전환되기도 한다. 무명시절 탄탄하게 다져뒀던 1급 자원이 있다면 그 가속은 계속 유지되거나 더 빨라진다. 만약 1급 자원이 빈약한 상태에서의 단순 기회였다면, 잠깐 반짝였던 별로 사라질 것이다. 기회는 준비된 자가 잡는다. 여러 선순환에 가속이 붙는다면 그 래퍼의 자원은 지속해서 증가된다. 순환을 잘 경영하면 우리도 급성장할 수 있다.</p><h3 id="악순환-가속"><a href="#악순환-가속" class="headerlink" title="악순환 가속"></a>악순환 가속</h3><p>잘 되고 있다가 몰락하는 사람들이 있다. 우리는 그런 모습을 유명한 사람에게서 많이 접한다. 이번 승리 사건을 예로 들어보자. 사업도 잘되고 있었고 방송에도 많이 나오는 등 여러 선순환이 잘 돌고 있다가 사건이 터지고 대표적으로 ‘이미지’라는 자원이 심하게 감소했다. 감소한 자원들은 기존 순환들에 모두 영향을 주어 선순환마저 악순환으로 돌려버린다. 악순환들에 가속이 붙게 되고 자원은 지속해서 고갈된다. 그대로 몰락한다.</p><br><h2 id="악순환을-어떻게-해결할까"><a href="#악순환을-어떻게-해결할까" class="headerlink" title="악순환을 어떻게 해결할까"></a>악순환을 어떻게 해결할까</h2><p>선순환이 자원을 쌓는 와중에도 더 강한 악순환이 자원을 계속 소모하고 있다면 결국 자원은 고갈되고 (1급 자원은 고갈되지는 않지만 ‘자존감’, ‘기분’ 이 낮아진다면 제 실력을 발휘하지 못한다) 선순환까지 악순환으로 바뀐다. 악순환에도 관심을 가지고 선순환으로 바꾸려는 노력이 필요하다. 2가지 방법을 소개한다. </p><h3 id="끊어라"><a href="#끊어라" class="headerlink" title="끊어라"></a>끊어라</h3><p>자신이 생각하기에 자원을 많이 소모하면서까지 선순환으로 바꿀 가치가 없는 악순환이면 끊어 버리자. 단순히 두려워서 못 끊고 있다면 용기를 내어 끊어보자. 악순환은 기생충처럼 자원을 쭉쭉 빨아먹을 것이다. 그런 악순환이 많아진다면 삶은 점점 피폐해진다.</p><ul><li>예) 당신을 깎아내리고 싶어 하는 친구가 있다. 이 사람과 계속 관계를 유지한다면  자존감, 기분, 평판 등의 자원이 계속 낮아질 것이다. 이 친구는 당신을 깎아내리며 ‘자존감’, ‘기분’의 자원을 채우려 든다. 이런 관계는 좋지 않다. 끊어버려라. 집단도 마찬가지다 속해 있는 집단이 당신에게 안 좋은 영향을 더 많이 준다면 나와라.</li><li>예) 음식점을 차렸지만 계속 적자가 난다. 시간도 많이 들고 마음도 점점 지친다. 팔아버려라</li></ul><p>이런 용기 있는 선택들이 자원이 새는 걸 막아줄 것이다.</p><h3 id="자원을-투자하라"><a href="#자원을-투자하라" class="headerlink" title="자원을 투자하라"></a>자원을 투자하라</h3><p>자원을 소모하면서까지 선순환으로 바꿀 가치가 있다면 자원을 투자하라. 자원이 부족하다면 기존에 있던 선순환을 더 크게 굴려서 자원을 끌어오자. (나의 경우 코딩이 잘 안 되고 악순환으로 빠지려 할 때 춤을 통해 [기분, 자존감, 열정] 등의 자원을 끌어온다) 그럴 선순환이 없다면 새로운 선순환을 만들어 보자. 모든 게 잘 안 풀릴 때 새로운 취미나 일 혹은 사람을 만나면서 잘 풀리는 경우가 이 경우다.</p><ul><li>예) 당신을 깎아내리고 있지만, 그 이상의 의미가 있는 친구다. 그러면 시간과 정신적 자원을 투자해서라도 대화를 시도하거나 호의적인 모습들을 보여줘라. 친구가 이러는 원인이 무엇인지 찾아내어 풀려고 노력하라. 풀린다면 더 좋은 관계가 된다.</li><li>예) 음식점이 적자가 나고 있지만, 당신에게는 그 이상의 의미가 있다. 다른 일을 해서라도 돈을 벌어 적자를 메운다. 시간과 돈을 들여 꾸준히 사업과 음식에 대해 공부한다. 점점 단골이 생기기 시작하며 결국 매출을 올리게 된다. </li></ul><p>악순환을 선순환으로 바꾸는 것은 쉬운 일이 아니다. 생각보다 많은 자원을 소모하게 될 것이다. 이 악순환이 자신에게 얼만큼의 가치가 있는지 생각해보고 끊을지 투자할지 판단해서 행동하자</p><br><h2 id="거짓-자원"><a href="#거짓-자원" class="headerlink" title="거짓 자원"></a>거짓 자원</h2><p>자원이 자원을 불러온다고 했었다. 그럼 거짓 자원도 자원을 불러들일 수 있지 않을까? 충분히 불러올 수 있다. ‘기분’, ‘자존심’, ‘이미지’ 등 정형화할 수 없는 자원들이 많다. 즉 생각하기 나름이고 보이기 나름이란 것이다. 충분히 다른 사람을 속일 수 있고, 자신도 속일 수 있다. 이 원리를 적절히 잘 활용한다면 순환을 경영하는 데 큰 도움이 된다. </p><p>대표적으로 ‘웃으면 행복이 찾아온다’라는 말이 있다. 행복해야 기분이 좋아져서 웃는 것이지만, 반대로 행복하지 않아도 억지로 웃어서 자신의 ‘기분’ 자원을 부풀린 뒤 순환을 통해 행복을 불러오게 한다. 그리고 그 행복은 결국 다시 기분에 영향을 주어 부풀렸던 기분은 진정한 기분이 되어 있을 것이다.</p><p>한 가지 예를 더 들어보자. 댄서가 행사장에 갔을 때 우승자처럼 생각하고 행동한다면 그렇게 하지 않았을 때 보다 성적이 좋을 확률이 높다. 자신감이 생기게 되고 잠재된 실력까지 발휘된다. 주위 사람들도 당신의 자신감 있는 모습에 똑같은 동작도 다르게 느껴지게 된다. 결국 좋은 결과로 이어지며 부풀렸던 자신감은 진정한 자신감으로 채워진다. 이 원리는 어느 곳에나 적용된다. </p><blockquote><p>‘성공’이 ‘성공한 사람’을 만드는가 아니면 ‘성공한 사람’이 ‘성공’을 만드는가? ‘닭이 먼저냐 아니면 달걀이 먼저냐?’라는 문제처럼 영원한 미궁 속으로 빠진다. 그러나 한 가지 사실은 분명하다. 만약 당신이 ‘성공한 사람의 이미지’를 갖춘다면 성공할 수 있다. - 마태효과, 시우 저, 오수형 역, 사람과책 2006, 249p</p></blockquote><p>이 원리를 잘 이용하는 사람들은 랩퍼들이다. 성공하지 않았을 때도 성공한 것처럼 가사를 쓴다. 돈이 없어도 돈이 많은 것처럼 가사를 쓴다. 그렇게 하면 자신도 더 성공한 사람처럼 느껴지고, 외부에서 보는 이미지도 달라진다. (모든 랩퍼가 그렇다는 건 아니다) 이 원리를 잘 이용하는 래퍼들은 결국 가사처럼 된다.</p><p>단 ‘이미지’와 같은 외부 영향이 큰 자원은 감당할 수 있을 정도로 부풀려야 한다. 진정한 자원으로 채우기 위한 노력을 게을리하면 안 된다.  부풀린 상태를 오래 유지하면 오히려 독이 되어 거짓말쟁이로 낙인찍힐 수 있다. 예를 들어 성공한 사람처럼 보이려고 하지만 정작 노력은 하지 않는 사람이 있다. 주위 사람들은 그 사람을 점점 거짓말쟁이로 생각하게 된다. 신뢰는 떨어지고 사람들은 멀어진다. 이것은 성장을 위해 ‘거짓 자원’을 이용하기보다 자격지심일 가능성이 크다. 책임질 수 있을 만큼 이용하자</p><br><h1 id="마지막으로"><a href="#마지막으로" class="headerlink" title="마지막으로"></a>마지막으로</h1><p>이 글을 쓰면서 나 또한 많이 정리되는 계기가 되었다. 아직 많이 부족하고 공부할 건 많다. 내가 좋아하는 사람들과 함께 공부하고 에너지를 나눌 수 있다면 좋을 것 같다.</p><p>순환에 대해서 너무 어렵게 접근하지 않아도 된다. 내가 가진 순환을 하나하나 그리진 않는다. 하지만 순환과 자원에 대해서 이해하고 인식하고만 있어도 매우 많은 도움이 된다는 걸 느꼈다. </p><blockquote><p>성공의 최대 장점은 사람들이 당신에게 신뢰감을 느끼고 더 크고 많은 기회를 제공한다는 것이다. 더 크고 많은 기회가 생겼을 때 비로소 당신의 잠재 능력을 발휘할 수 있다. 따라서 성공은 지금보다 배로 증가하는 효과가 있다. 당신이 성공하면 할수록 더 많은 기회와 자신을 갖게 되는데, 그 자신감과 기회가 또다시 당신을 성공하게 한다. 이런 시각에서 볼 때, 성공은 성공의 어머니다. - 마태효과, 시우 저, 오수형 역, 사람과책 2006, 69p</p></blockquote><p>돈이 돈을 부른다는 말이 있다. 맞는 말이다. 자원이 자원을 부른다. 성공은 성공의 어머니다. 순환과 자원을 잘 경영해서 선순환을 많이 만들자. 성장이란 ‘순환 경영’을 통해 더 많은 자원을 쌓아가는 것이다.</p><p>글을 다듬는 데 도움을 준 어머니, 마르코, 알렉스, 정림이누나, 옥구형, 석진이형, 인중이 감사합니다 ~</p>]]></content:encoded>
      
      <comments>https://zunik.me/2019/07/10/virtuous-cycle/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
